import java.text.SimpleDateFormat;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.Date;

/**
 * the class contains attributes of a booking and
 * provides methods to make and cancel bookings
 */
public class Booking {
    /**
     * The number of tickets the customer wants from this booking
     */
    private int numTickets;

    /**
     * Details of the customer
     */
    private String firstName;
    private String lastName;
    private String address;
    private String emailAddress;
    private String phoneNumber;

    /**
     * Every booking has a unique booking number and is generated after successful payment
     */
    private String bookingNumber;

    /**
     * Represents the status of this booking
     */
    private BookingStatus bookingStatus;

    /**
     * Only one of the these two would be present for one booking
     */
    private OnlineEvent onlineEvent;
    private InPersonEvent inPersonEvent;

    /**
     * For validation of email address and phone number
     */
    private Pattern regexPattern;
    private Matcher regMatcher;

    /**
     * This booking number is automatically generated by the system to consist of the
     * concatenation, in order, of: the user’s initial (i.e. first letter of first name), first 5 letters of
     * their family name padded with ’*’s if the name is shorter, current date, a ’-’ sign, current
     * time
     *
     * @param firstName first name of the customer who made the booking
     * @param lastName last name of the customer who made the booking
     * @return A unique booking number for this booking
     */
    public String generateBookingNumber(String firstName, String lastName) {
        String part1 = firstName.substring(0,1).toUpperCase();
        String part2;
        if(lastName.length()>=5){
            part2 = lastName.substring(0,5);
        }else{
            part2 = lastName + "*".repeat(5 - lastName.length());
        }
        String part3 = new SimpleDateFormat("yyyy-MM-dd-HH:mm:ss.SSSSSS") .format(new Date() );
        this.bookingNumber = part1 + part2 + part3;
        return bookingNumber;
    }

    @Override
    public String toString() {
        //need toString from onlineEvent and inPersonEvent?
        return "You have completed the booking. " +
                "Booking{" +
                "number of ticket(s) purchased: " + numTickets +
                ", first name: '" + firstName + '\'' +
                ", last name: '" + lastName + '\'' +
                ", address: '" + address + '\'' +
                ", email address: '" + emailAddress + '\'' +
                ", phone number: '" + phoneNumber + '\'' +
                ", booking number: '" + bookingNumber + '\'' +
                '}';
    }

    /**
     * Customer selects an online event and wanted number of tickets, as well as personal information,
     * checks if the time of event is OK and if the event is sold out.
     *
     * @param onlineEvent the online event of interest
     * @param numTickets wanted number of tickets
     * @param firstName first name of the customer
     * @param lastName last name of the customer
     * @param address address of the customer
     * @param emailAddress email address of the customer
     * @param phoneNumber phone number of the customer
     * @return false if time is not suitable or event is sold out, true if passed those checks
     */
    public boolean startBookingOnlineEvent(OnlineEvent onlineEvent, int numTickets, String firstName, String lastName, String address, String emailAddress, String phoneNumber){
        long twoMoreWeeks = System.currentTimeMillis() + (86400 * 14 * 1000);
        Date twoWeeksLater = new Date(twoMoreWeeks);
        Date startTime = onlineEvent.getStartTime();
        if(!bookable(twoWeeksLater,startTime)){
            return false;
        }
        if(onlineEvent.isNotSoldOut()){
            enterInformation(numTickets, firstName, lastName, address, emailAddress, phoneNumber);
            this.onlineEvent = onlineEvent;
            return true;
        }else{
            System.out.println("No enough tickets left.");
            return false;
        }
    }

    /**
     * Customer selects an in person event and wanted number of tickets, as well as personal information,
     * checks if the time of event is OK and if the event is sold out.
     *
     * @param inPersonEvent the in person event of interest
     * @param numTickets wanted number of tickets
     * @param firstName first name of the customer
     * @param lastName last name of the customer
     * @param address address of the customer
     * @param emailAddress email address of the customer
     * @param phoneNumber phone number of the customer
     * @return false if time is not suitable or event is sold out, true if passed those checks
     */
    public boolean startBookingInPersonEvent(InPersonEvent inPersonEvent, int numTickets, String firstName, String lastName, String address, String emailAddress, String phoneNumber){
        long twoMoreWeeks = System.currentTimeMillis() + (86400 * 14 * 1000);
        Date twoWeeksLater = new Date(twoMoreWeeks);
        Date startTime = onlineEvent.getStartTime();
        if(!bookable(twoWeeksLater,startTime)){
            return false;
        }
        if(inPersonEvent.isNotSoldOut()){
            System.out.println(enterInformation(numTickets, firstName, lastName, address, emailAddress, phoneNumber));
            this.inPersonEvent = inPersonEvent;
            return true;
        }else{
            System.out.println("No enough tickets left.");
            return false;
        }
    }

    /**
     * Checks if the time is in the past or longer than 14 days ahead
     *
     * @param twoWeeksLater the time stamp that is exactly 14 days ahead of now
     * @param startTime start time of the event
     * @return true if event start time is between this moment and 14 days later, false if not
     */
    public boolean bookable(Date twoWeeksLater, Date startTime){
        long days14 = 14L * 24 * 60 * 60 * 1000;
        long date1 = startTime.getTime();
        long date2 = twoWeeksLater.getTime();
        long diff = date2 - date1;
        //checks if the event has already taken place, as well as if it is within 14 days.
        if (diff >= 0 && diff <= days14){
            return true;
        }else{
            return false;
        }
    }

    /**
     * takes in all the personal details of the customer and checks their eligibility
     *
     * @param numTickets wanted number of tickets
     * @param firstName first name of the customer
     * @param lastName last name of the customer
     * @param address address of the customer
     * @param emailAddress email address of the customer
     * @param phoneNumber phone number of the customer
     * @return true if they are all eligible, false if not
     */
    private boolean enterInformation(int numTickets, String firstName, String lastName, String address, String emailAddress, String phoneNumber) {
        if (numTickets > 0 && firstName.length() > 0 && lastName.length() > 0 && validEmailAddress(emailAddress) && validPhoneNumber(phoneNumber) && validName(firstName) && validName(lastName)){
            this.numTickets = numTickets;
            this.bookingStatus = BookingStatus.PENDING;
            this.firstName = firstName;
            this.lastName = lastName;
            this.emailAddress = emailAddress;
            this.address = address;
            this.phoneNumber = phoneNumber;
            return true;
        }else{
            return false;
        }
    }

    /**
     * checks if case of name is eligible
     *
     * @param name first name or last name of the customer
     * @return true if first letter is upper case and everything else is lower case
     */
    public boolean validName(String name){
        if(Character.isLowerCase(name.charAt(0))){
            return false;
        }
        for(int i = 1; i < name.length(); i++){
            if(Character.isUpperCase(name.charAt(i))){
                return false;
            }
        }
        return true;
    }

    /**
     * checks if the format of email address is eligible
     *
     * @param emailAddress email address of the customer
     * @return true if the format consists of a local part and a domain, false if not
     */
    public boolean validEmailAddress(String emailAddress) {
        regexPattern = Pattern.compile("^[(a-zA-Z-0-9-\\_\\+\\.)]+@[(a-z-A-z)]+\\.[(a-zA-z)]{2,3}$");
        regMatcher   = regexPattern.matcher(emailAddress);
        return regMatcher.matches();
    }

    /**
     * checks if the format of phone number is eligible
     *
     * @param phoneNumber phone number of the customer
     * @return true if the format consists of a regional code and a telephone number
     */
    public boolean validPhoneNumber(String phoneNumber) {
        regexPattern = Pattern.compile("^\\+[0-9]{2,3}+-[0-9]{10}$");
        regMatcher   = regexPattern.matcher(phoneNumber);
        return regMatcher.matches();
    }

    /**
     * customer is directed into a payment stage and booking status goes into active
     *
     * @return always true
     */
    public boolean pay(){
        this.bookingStatus = BookingStatus.ACTIVE;
        return true;
    }

    /**
     * last stage of booking, a unique booking number is generated,
     * event tickets are taken away, confirmation is printed,
     * booking is added to the collection of all bookings
     *
     * @param allBookings the collection of all bookings that have been made
     * @return true if successful payment and active booking status, false if not
     */
    public boolean finishBookingEvent(AllBookings allBookings){
        boolean paySuccessful = pay();
        if(paySuccessful){
            this.bookingNumber = this.generateBookingNumber(this.firstName, this.lastName);
            System.out.println("pass");
            if(inPersonEvent==null){
                onlineEvent.sellTickets(numTickets);
                String eventDetails = onlineEvent.toString();
                System.out.println(this.toString()+eventDetails);
            }else if(onlineEvent==null){
                inPersonEvent.sellTickets(numTickets);
                String eventDetails = inPersonEvent.toString();
                System.out.println(this.toString()+eventDetails);
            }
            allBookings.Bookings.add(this);
            return true;
        }else{
            System.out.println("Unsuccessful payment. Booking must be restarted.");
            return false;
        }
    }

    /**
     * customer calls the box office and provides name and booking number,
     * and cancels booking
     *
     * @param allBookings the collection of all bookings
     * @param fName first name of the customer
     * @param lName last name of the customer
     * @param bookingNumber booking number of the event that is supposed to be cancelled
     * @return true if the event has been recorded in all bookings and is cancelled, false if not
     */
    public boolean cancelBookingByBoxOffice(AllBookings allBookings, String fName, String lName, String bookingNumber){
        //remove the booking from the collection if bookingNumber, firstName, lastName all match
        for(Booking booking : allBookings.Bookings){
            if(booking.bookingNumber.equals(bookingNumber)&&booking.firstName.equals(fName)&&booking.lastName.equals((lName))){
                allBookings.Bookings.remove(booking);
                System.out.println("Booking has been removed by the box office.");
                return true;
            }
        }
        return false;
    }

    /**
     * customer has access to cancellation of booking with email address and booking number,
     * and proceeds to cancel one
     *
     * @param allBookings the collection of all bookings
     * @param emailAddress email address of the customer
     * @param bookingNumber booking number of the booking
     * @return true if the booking has been recorded in all booking and has been removed, false if not
     */
    public boolean cancelBookingOnline(AllBookings allBookings, String emailAddress, String bookingNumber){
        //remove the booking from the collection if email and booking number both match
        for(Booking booking : allBookings.Bookings){
            if(booking.bookingNumber.equals(bookingNumber)&&booking.emailAddress.equals(emailAddress)){
                allBookings.Bookings.remove(booking);
                System.out.println("Booking has been removed.");
                this.bookingStatus = BookingStatus.CANCELLED;
                return true;
            }
        }
        return false;
    }
}
